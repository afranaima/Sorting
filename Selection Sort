#include <iostream>
#include <cstdlib>
#include <chrono>
using namespace std;

int *generate_random_int(int n)
{
    int *data = new int[n];
    for (int i = 0; i < n; i++)
    {
        data[i] = rand();
    }
    return data;
}

bool is_sorted(int *data, int n)
{
    for (int i = 1; i < n; i++)
    {
        if (data[i - 1] > data[i])
        {
            return false;
        }
    }
    return true;
}

void SelectionSort(int *data, int n)
{
    for (int i = 0; i < n - 1; i++)
    {
        int min_idx = i;
        for (int j = i + 1; j < n; j++)
        {
            if (data[j] < data[min_idx])
            {
                min_idx = j;
            }
        }
        int temp = data[i];
        data[i] = data[min_idx];
        data[min_idx] = temp;
    }
}


int main()
{
    int num_of_experiments = 100;
    int *data;
    int n;

    // DEBUG
    // The program will stop if the sorting is incorrect
    n = 100;
    data = generate_random_int(n);
    SelectionSort(data, n);
    if (!is_sorted(data, n))
    {
        cerr << "Sorting function ERROR." << endl;
        return 1; // Exit the program with an error code
    }

    // EXPERIMENTS
    cout << "data, time (ms)\n";
    cout << "---------------\n";
    for (int i = 1; i <= num_of_experiments; i++)
    {
        n = i * 1000;
        data = generate_random_int(n);
        auto start = chrono::high_resolution_clock::now();
        SelectionSort(data, n);
        auto stop = chrono::high_resolution_clock::now();
        auto duration = chrono::duration_cast<chrono::milliseconds>(stop - start);
        cout << n << ", " << duration.count() << "\n";
        delete[] data;
    }
    return 0;
}
